{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst cors = require(\"cors\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst bcrypt = require(\"bcrypt\");\nconst db = require(\"./db\");\nconst app = express();\nconst PORT = 3010;\napp.use(cors());\napp.use(express.json());\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\n\n// Multer config\nconst storage = multer.diskStorage({\n  destination: \"uploads/\",\n  filename: (req, file, cb) => {\n    const uniqueName = Date.now() + path.extname(file.originalname);\n    cb(null, uniqueName);\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// Upload de imagem\napp.post(\"/upload\", upload.single(\"image\"), (req, res) => {\n  const {\n    name,\n    description\n  } = req.body;\n  const filename = req.file.filename;\n  const createdAt = new Date().toISOString();\n  db.run(\"INSERT INTO images (name, description, filename, created_at) VALUES (?, ?, ?, ?)\", [name, description, filename, createdAt], function (err) {\n    if (err) return res.status(500).send(err.message);\n    res.json({\n      id: this.lastID,\n      name,\n      description,\n      filename,\n      created_at: createdAt\n    });\n  });\n});\n\n// Atualizar imagem\napp.put(\"/images/:id\", upload.single(\"image\"), (req, res) => {\n  var _req$file;\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    description\n  } = req.body;\n  const newFile = (_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename;\n  db.get(\"SELECT filename FROM images WHERE id = ?\", [id], (err, row) => {\n    if (err) return res.status(500).send(err.message);\n    if (!row) return res.status(404).send(\"Imagem não encontrada\");\n    const oldFilePath = path.join(__dirname, \"uploads\", row.filename);\n    const query = newFile ? \"UPDATE images SET name = ?, description = ?, filename = ? WHERE id = ?\" : \"UPDATE images SET name = ?, description = ? WHERE id = ?\";\n    const params = newFile ? [name, description, newFile, id] : [name, description, id];\n    db.run(query, params, function (err) {\n      if (err) return res.status(500).send(err.message);\n      if (newFile && fs.existsSync(oldFilePath)) {\n        fs.unlink(oldFilePath, () => {});\n      }\n      res.send({\n        id,\n        name,\n        description,\n        filename: newFile || row.filename\n      });\n    });\n  });\n});\n\n// Registrar usuário\napp.post(\"/register\", async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  if (!username || !password) return res.status(400).send(\"Campos obrigatórios\");\n  try {\n    const password_hash = await bcrypt.hash(password, 10);\n    db.run(\"INSERT INTO users (username, password_hash) VALUES (?, ?)\", [username, password_hash], function (err) {\n      if (err) return res.status(500).send(\"Erro ao registrar\");\n      res.status(201).send(\"Usuário registrado com sucesso\");\n    });\n  } catch (err) {\n    res.status(500).send(\"Erro no servidor\");\n  }\n});\n\n// Login\napp.post(\"/login\", (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  db.get(\"SELECT * FROM users WHERE username = ?\", [username], async (err, user) => {\n    if (err || !user) return res.status(401).send(\"Usuário não encontrado\");\n    const match = await bcrypt.compare(password, user.password_hash);\n    if (!match) return res.status(401).send(\"Senha incorreta\");\n    res.send(\"Login bem-sucedido\");\n  });\n});\n\n// Listar imagens\napp.get(\"/images\", (req, res) => {\n  const search = req.query.q || \"\";\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const offset = (page - 1) * limit;\n  const like = `%${search}%`;\n  const sort = req.query.sort || \"recent\";\n  let orderBy = \"id DESC\";\n  if (sort === \"oldest\") orderBy = \"id ASC\";\n  if (sort === \"az\") orderBy = \"name COLLATE NOCASE ASC\";\n  if (sort === \"za\") orderBy = \"name COLLATE NOCASE DESC\";\n  const queryData = `\n    SELECT * FROM images\n    WHERE name LIKE ? OR description LIKE ?\n    ORDER BY ${orderBy}\n    LIMIT ? OFFSET ?\n  `;\n  const queryCount = `\n    SELECT COUNT(*) as total FROM images\n    WHERE name LIKE ? OR description LIKE ?\n  `;\n  db.all(queryData, [like, like, limit, offset], (err, rows) => {\n    if (err) return res.status(500).send(err.message);\n    db.get(queryCount, [like, like], (err2, result) => {\n      if (err2) return res.status(500).send(err2.message);\n      res.json({\n        data: rows,\n        total: result.total\n      });\n    });\n  });\n});\n\n// Deletar imagem\napp.delete(\"/images/:id\", (req, res) => {\n  const {\n    id\n  } = req.params;\n  db.get(\"SELECT filename FROM images WHERE id = ?\", [id], (err, row) => {\n    if (err) return res.status(500).send(err.message);\n    if (!row) return res.status(404).send(\"Imagem não encontrada\");\n    const filePath = path.join(__dirname, \"uploads\", row.filename);\n    db.run(\"DELETE FROM images WHERE id = ?\", [id], err => {\n      if (err) return res.status(500).send(err.message);\n      if (fs.existsSync(filePath)) {\n        fs.unlink(filePath, () => {});\n      }\n      res.sendStatus(204);\n    });\n  });\n});\napp.listen(PORT, () => {\n  console.log(`🚀 Servidor rodando em http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","multer","cors","path","fs","bcrypt","db","app","PORT","use","json","static","join","__dirname","storage","diskStorage","destination","filename","req","file","cb","uniqueName","Date","now","extname","originalname","upload","post","single","res","name","description","body","createdAt","toISOString","run","err","status","send","message","id","lastID","created_at","put","_req$file","params","newFile","get","row","oldFilePath","query","existsSync","unlink","username","password","password_hash","hash","user","match","compare","search","q","page","parseInt","limit","offset","like","sort","orderBy","queryData","queryCount","all","rows","err2","result","data","total","delete","filePath","sendStatus","listen","console","log"],"sources":["C:/Users/Anderson/Desktop/React/meu-projeto/frontend/src/index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst cors = require(\"cors\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst db = require(\"./db\");\r\n\r\nconst app = express();\r\nconst PORT = 3010;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n\r\n// Multer config\r\nconst storage = multer.diskStorage({\r\n  destination: \"uploads/\",\r\n  filename: (req, file, cb) => {\r\n    const uniqueName = Date.now() + path.extname(file.originalname);\r\n    cb(null, uniqueName);\r\n  },\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Upload de imagem\r\napp.post(\"/upload\", upload.single(\"image\"), (req, res) => {\r\n  const { name, description } = req.body;\r\n  const filename = req.file.filename;\r\n  const createdAt = new Date().toISOString();\r\n\r\n  db.run(\r\n    \"INSERT INTO images (name, description, filename, created_at) VALUES (?, ?, ?, ?)\",\r\n    [name, description, filename, createdAt],\r\n    function (err) {\r\n      if (err) return res.status(500).send(err.message);\r\n      res.json({\r\n        id: this.lastID,\r\n        name,\r\n        description,\r\n        filename,\r\n        created_at: createdAt,\r\n      });\r\n    }\r\n  );\r\n});\r\n\r\n// Atualizar imagem\r\napp.put(\"/images/:id\", upload.single(\"image\"), (req, res) => {\r\n  const { id } = req.params;\r\n  const { name, description } = req.body;\r\n  const newFile = req.file?.filename;\r\n\r\n  db.get(\"SELECT filename FROM images WHERE id = ?\", [id], (err, row) => {\r\n    if (err) return res.status(500).send(err.message);\r\n    if (!row) return res.status(404).send(\"Imagem não encontrada\");\r\n\r\n    const oldFilePath = path.join(__dirname, \"uploads\", row.filename);\r\n\r\n    const query = newFile\r\n      ? \"UPDATE images SET name = ?, description = ?, filename = ? WHERE id = ?\"\r\n      : \"UPDATE images SET name = ?, description = ? WHERE id = ?\";\r\n    const params = newFile\r\n      ? [name, description, newFile, id]\r\n      : [name, description, id];\r\n\r\n    db.run(query, params, function (err) {\r\n      if (err) return res.status(500).send(err.message);\r\n      if (newFile && fs.existsSync(oldFilePath)) {\r\n        fs.unlink(oldFilePath, () => {});\r\n      }\r\n      res.send({ id, name, description, filename: newFile || row.filename });\r\n    });\r\n  });\r\n});\r\n\r\n// Registrar usuário\r\napp.post(\"/register\", async (req, res) => {\r\n  const { username, password } = req.body;\r\n  if (!username || !password)\r\n    return res.status(400).send(\"Campos obrigatórios\");\r\n\r\n  try {\r\n    const password_hash = await bcrypt.hash(password, 10);\r\n    db.run(\r\n      \"INSERT INTO users (username, password_hash) VALUES (?, ?)\",\r\n      [username, password_hash],\r\n      function (err) {\r\n        if (err) return res.status(500).send(\"Erro ao registrar\");\r\n        res.status(201).send(\"Usuário registrado com sucesso\");\r\n      }\r\n    );\r\n  } catch (err) {\r\n    res.status(500).send(\"Erro no servidor\");\r\n  }\r\n});\r\n\r\n// Login\r\napp.post(\"/login\", (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  db.get(\r\n    \"SELECT * FROM users WHERE username = ?\",\r\n    [username],\r\n    async (err, user) => {\r\n      if (err || !user) return res.status(401).send(\"Usuário não encontrado\");\r\n\r\n      const match = await bcrypt.compare(password, user.password_hash);\r\n      if (!match) return res.status(401).send(\"Senha incorreta\");\r\n\r\n      res.send(\"Login bem-sucedido\");\r\n    }\r\n  );\r\n});\r\n\r\n// Listar imagens\r\napp.get(\"/images\", (req, res) => {\r\n  const search = req.query.q || \"\";\r\n  const page = parseInt(req.query.page) || 1;\r\n  const limit = parseInt(req.query.limit) || 10;\r\n  const offset = (page - 1) * limit;\r\n  const like = `%${search}%`;\r\n  const sort = req.query.sort || \"recent\";\r\n\r\n  let orderBy = \"id DESC\";\r\n  if (sort === \"oldest\") orderBy = \"id ASC\";\r\n  if (sort === \"az\") orderBy = \"name COLLATE NOCASE ASC\";\r\n  if (sort === \"za\") orderBy = \"name COLLATE NOCASE DESC\";\r\n\r\n  const queryData = `\r\n    SELECT * FROM images\r\n    WHERE name LIKE ? OR description LIKE ?\r\n    ORDER BY ${orderBy}\r\n    LIMIT ? OFFSET ?\r\n  `;\r\n  const queryCount = `\r\n    SELECT COUNT(*) as total FROM images\r\n    WHERE name LIKE ? OR description LIKE ?\r\n  `;\r\n\r\n  db.all(queryData, [like, like, limit, offset], (err, rows) => {\r\n    if (err) return res.status(500).send(err.message);\r\n    db.get(queryCount, [like, like], (err2, result) => {\r\n      if (err2) return res.status(500).send(err2.message);\r\n      res.json({ data: rows, total: result.total });\r\n    });\r\n  });\r\n});\r\n\r\n// Deletar imagem\r\napp.delete(\"/images/:id\", (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  db.get(\"SELECT filename FROM images WHERE id = ?\", [id], (err, row) => {\r\n    if (err) return res.status(500).send(err.message);\r\n    if (!row) return res.status(404).send(\"Imagem não encontrada\");\r\n\r\n    const filePath = path.join(__dirname, \"uploads\", row.filename);\r\n\r\n    db.run(\"DELETE FROM images WHERE id = ?\", [id], (err) => {\r\n      if (err) return res.status(500).send(err.message);\r\n      if (fs.existsSync(filePath)) {\r\n        fs.unlink(filePath, () => {});\r\n      }\r\n      res.sendStatus(204);\r\n    });\r\n  });\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Servidor rodando em http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}